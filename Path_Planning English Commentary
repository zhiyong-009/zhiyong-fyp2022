============
Path planning
=============

.. |path_planning| image:: temp_static/path_planning/path_planning.png
   :scale: 50 %

.. |contours| image:: temp_static/path_planning/contours.png
   :scale: 50 %

.. |follow_poses| image:: temp_static/path_planning/follow_poses.png
   :scale: 50 %

.. |revolve| image:: temp_static/path_planning/revolve.png
   :scale: 50 %

.. |profile| image:: temp_static/path_planning/profile.png
   :scale: 50 %

.. |polygon_offsets| image:: temp_static/path_planning/polygon_offsets.png
   :scale: 50 %

|path_planning| |contours| |follow_poses| |revolve| |profile|

|polygon_offsets|

.. ATTENTION::
   L’action de générer une trajectoire supprime toutes les modifications effectuées sur la trajectoire courante !
.. The action of generating a trajectory deletes all the modifications made to the current trajectory!
Génération d'une trajectoire
============================
* **Generation algorithm:** Permet de choisir l’algorithme à utiliser.
* **YAML or mesh file:** Permet de sélectionner le fichier modèle pour générer les trajectoires:
.. *Generation algorithm:** Allows you to choose the algorithm to use.
* **YAML or mesh file:** Allows you to select the model file to generate the trajectories:

Les fichiers maillages acceptés sont représentés par les extensions ``.obj`` ``.stl`` et ``.ply``.

.. NOTE:: L'échelle pour les fichiers STL est 1 unité = 1 mètre 
.. Scale for STL files is 1 unit = 1 meter
.. n YAML file is represented by the extension ``.yaml`` (or ``yml``). It is a text file. Here is an example YAML file:
Un fichier YAML est représenté par l’extension ``.yaml`` (ou ``yml``). C’est un fichier texte. Voici un exemple de fichier YAML:


  .. code-block:: YAML

    ---
    – layer:
      – polygon:
        – [0.075, -0.025, 0]
        – [0.025, -0.025, 0]
        – [0, 0, 0]
        – [0.025, 0.075, 0]
        – [0.125, 0.025, 0]
      – polygon:
        – [0.025, 0, 0]
        – [0.025, 0.025, 0]
        – [0.05, 0.05, 0]
        – [0.075, 0.025, 0]
        – [0.075, 0, 0]
    – layer:
      – polygon:
        – [0.15, -0.025, 0]
        – [0.15, 0.025, 0]
        – [0.175, 0.025, 0]
        – [0.2, 0, 0]
        – [0.18, -0.0125, 0]
        – [0.2, -0.025, 0]

* Les 3 premières lignes sont obligatoires pour définir une couche et un polygone.
* L'indentation est obligatoire et doit être respectée.
* Il est possible d’ajouter autant de polygones que souhaité.
* Suivant l’algorithme il est possible ou non d’ajouter plusieurs couches.
.. * The first 3 lines are mandatory to define a layer and a polygon.
* The indentation is mandatory and must be respected.
* It is possible to add as many polygons as desired.
* Depending on the algorithm, it is possible or not to add several layers.

Les fichiers YAML peuvent être plus complets: on peut spécifier l’orientation aux points, sous la forme ``[position, orientation]`` avec ``position=[X, Y, Z]`` et ``orientation=[qX, qY, qZ, qW]`` (quaternions normalisés). Voici un exemple:
.. YAML files can be more complete: one can specify the orientation at points, in the form ``[position, orientation]`` with ``position=[X, Y, Z]`` and ``orientation=[qX , qY, qZ, qW]`` (normalized quaternions). Here is an example:
.. code-block:: YAML

  ---
  – layer:
    – polygon:
  #   – [X, Y, Z, qX, qY, qZ, qW]
      – [0, 0, 0, 0, 0, 0, 1]
      – [0.05, 0, 0, 0, 0, 0.707, 0.707]
      – [0.05, 0.05, 0, 0, 0, 1, 0]
      – [0, 0.05, 0, 0, 0, 0.707, -0.707]

Descriptions des algorithmes
============================
* **DonghongDing**: Algorithme qui maximise le remplissage de la géométrie et sans arrêt dans la trajectoire.
* **Contours**: Génère une trajectoire sur le contour de la géométrie (pas de remplissage) sans arrêt dans la trajectoire.
* **Follow poses**: Permet de suivre une liste de poses dans un fichier YAML.
* **Polygon offsets**: Algorithme permettant de créer une trajectoire en décalant une trajectoire originelle.
* **DonghongDing**: Algorithm that maximizes the filling of geometry and without stopping in the trajectory.
* **Outlines**: Generates a trajectory on the geometry outline (no fill) with no stop in the trajectory.
* **Follow poses**: Follow a list of poses in a YAML file.
* **Polygon offsets**: Algorithm allowing to create a trajectory by offsetting an original trajectory.

DonghongDing et Contours
========================
* **Number of layers:** Le nombre de couches à générer, les couches suivantes sont dupliquées à partir de la 1ère couche (disponible uniquement avec un fichier YAML).
* **Height between layers:** La distance entre chaque couche.
* **Deposited material width:** La largeur de dépose du matériau, tenir compte du recouvrement si nécessaire.
* **Slicing direction:** Le vecteur direction pour le découpage du maillage (disponible uniquement avec un fichier maillage).

Il n’est pas possible de définir plusieurs couches dans un fichier YAML avec ces deux algorithmes.
**Number of layers:** The number of layers to generate, the following layers are duplicated from the 1st layer (only available with a YAML file).
* **Height between layers:** The distance between each layer.
* **Deposited material width:** The width of the deposited material, take into account the overlap if necessary.
* **Slicing direction:** The direction vector for slicing the mesh (only available with a mesh file).

It is not possible to define multiple layers in a YAML file with these two algorithms.
DonghongDing
------------
**Contours filtering tolerance:** Insérer la tolérance à respecter entre le contour réel et celui utilisé. Le contour est d’autant plus simplifié que la tolérance est haute. Si la valeur demandée est trop faible (dépend de la forme demandée et de la capacité de l’algorithme à remplir la forme) l’erreur ``Failed to generate trajectory in one of the convex polygons`` va apparaître, et si la valeur demandée est trop grande l’erreur ``Failed to merge colinear edges`` va apparaître. Pour arriver à un résultat fonctionnel il faut tester plusieurs valeurs en s’aidant de ces 2 indications. Par exemple un cercle avec le fichier YAML suivant:

.. code-block:: YAML

  ---
  – layer:
    – polygon:
      – [0.05, 0, 0]
      – [0.0489074, 0.0103956, 0]
      – [0.0456773, 0.0203368, 0]
      – [0.0404509, 0.0293893, 0]
      – [0.0334565, 0.0371572, 0]
      – [0.025, 0.0433013, 0]
      – [0.0154508, 0.0475528, 0]
      – [0.00522642, 0.0497261, 0]
      – [-0.00522642, 0.0497261, 0]
      – [-0.0154508, 0.0475528, 0]
      – [-0.025, 0.0433013, 0]
      – [-0.0334565, 0.0371572, 0]
      – [-0.0404509, 0.0293893, 0]
      – [-0.0456773, 0.0203368, 0]
      – [-0.0489074, 0.0103956, 0]
      – [-0.05, 2.83277e-17, 0]
      – [-0.0489074, -0.0103956, 0]
      – [-0.0456773, -0.0203368, 0]
      – [-0.0404509, -0.0293893, 0]
      – [-0.0334565, -0.0371572, 0]
      – [-0.025, -0.0433013, 0]
      – [-0.0154508, -0.0475528, 0]
      – [-0.00522642, -0.0497261, 0]
      – [0.00522642, -0.0497261, 0]
      – [0.0154508, -0.0475528, 0]
      – [0.025, -0.0433013, 0]
      – [0.0334565, -0.0371572, 0]
      – [0.0404509, -0.0293893, 0]
      – [0.0456773, -0.0203368, 0]
      – [0.0489074, -0.0103956, 0]

Avec l’algorithme **Follow poses** comme référence (aucun filtrage):

.. image:: temp_static/path_planning/circle_follow.png
   :align: center
   :scale: 30 %

Avec l’algorithme DonghongDing avec respectivement une tolérance de 1, 1.1, 9 et 9.1 mm:
With the DonghongDing algorithm with a tolerance of 1, 1.1, 9 and 9.1 mm respectively:
.. |circle_fill_1| image:: temp_static/path_planning/circle_fill_1.png

.. |circle_fill_9_1| image:: temp_static/path_planning/circle_fill_9_1.png

.. |circle_fill_9| image:: temp_static/path_planning/circle_fill_9.png

.. |circle_fill_1_1| image:: temp_static/path_planning/circle_fill_1_1.png

+-------------------+-------------------+
| 1 mm:             | 9.1 mm:           |
+-------------------+-------------------+
| |circle_fill_1|   | |circle_fill_9_1| |
+-------------------+-------------------+
| 1.1 mm            | 9 mm              |
+-------------------+-------------------+
| |circle_fill_1_1| | |circle_fill_9|   |
+-------------------+-------------------+

Lorsque le filtrage est très élevé la géométrie est non préservée: sur le dernier exemple le cercle a été simplifié en un triangle.
When the filtering is very high the geometry is not preserved: on the last example the circle has been simplified into a triangle.

Polygon offsets
===============
Algorithme permettant de créer une trajectoire en décalant une trajectoire originelle suivant les axes X et Y. Sur l'axe Z, la trajectoire est recopiée couche par couche. Le sens de la trajectoire peut être inversée avec l'option ``Discontinous trajectory``.
L'algorithme lit un fichier `SVG <https://fr.wikipedia.org/wiki/Scalable_Vector_Graphics>`_ (image vectorielle) ou un fichier YAML (YML) qui décrit la forme originelle à décaler pour réaliser la forme souhaitée.
Algorithm used to create a trajectory by shifting an original trajectory along the X and Y axes. On the Z axis, the trajectory is copied layer by layer. The direction of the trajectory can be reversed with the ``Discontinuous trajectory`` option.
The algorithm reads an `SVG <https://fr.wikipedia.org/wiki/Scalable_Vector_Graphics>`_ file (vector image) or a YAML file (YML) which describes the original shape to be shifted to achieve the desired shape.
.. image:: temp_static/path_planning/polygon_offsets/2.png
   :align: center
   :scale: 50 %

Exemple d'une trajectoire originelle.

.. ATTENTION::
   Cet algorithme ne fonctionne pas si les trajectoires originelles présentent plusieurs chemins (svg) ou plusieurs polygones (YAML/YML) !

.. ATTENTION::
   Cet algorithme a un comportement différent si le contour est fermé ou ouvert !

- Exemples de trajectoire fermées :
..Examples of closed trajectories

.. image:: temp_static/path_planning/polygon_offsets/closed_polygon_miter.png
   :align: center
   :scale: 45 %

.. image:: temp_static/path_planning/polygon_offsets/closed_polygon_square.png
   :align: center
   :scale: 45 %

- Exemples de trajectoire ouvertes :

.. image:: temp_static/path_planning/polygon_offsets/closed_polygon_square_2.png
   :align: center
   :scale: 45 %

.. image:: temp_static/path_planning/polygon_offsets/open_round_round.png
   :align: center
   :scale: 45 %

.. ATTENTION::
   La fermeture d'une trajectoire est signifiée par un ``z`` (ou ``Z``) à la fin du chemin (``path``) dans un fichier SVG pour un YAML (YML), il suffit de vérifier que la dernière coordonnée est la même que la première. Pour cela on peut ouvrir le fichier avec un éditeur de texte
   Closing a path is signified by a ``z`` (or ``Z``) at the end of the path (``path``) in an SVG file for a YAML (YML), just check that the last coordinate is the same as the first. To do this, you can open the file with a text editor.
Voici la liste des options disponibles, dans l'ordre:

* **Number of layers:** Le nombre de couches
* **Height between layers:** La hauteur entre chaque couche
* **Deposited material width:** La largeur du dépot de matière
* **Arc points:** La précision d'un arc importé depuis un SVG (en nombre de points générés)
* **Discontinous trajectory:** Permet de choisir si l'on veut une trajectoire discontinue (avec arrêts) ou non
* **Number of passes:** Permet de choisir la largeur (en nombre de décalages) de chaque couche
* **Towards interior:** Permet de définir si l'on veut décaler la trajectoire originelle vers l'intérieur ou non
* `EndType <http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/EndType.htm>`_: Permet de définir le type de terminaison de la nouvelle trajectoire décalée
* `JoinType <http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/JoinType.htm>`_ Permet de définir le type de raccord entre chaque segment de la nouvelle trajectoire décalée
* `ArcTolerance <http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Classes/ClipperOffset/Properties/ArcTolerance.htm>`_: Permet de définir la précision de la discrétisation des arcs
* `MiterLimit <http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Classes/ClipperOffset/Properties/MiterLimit.htm>`_ Permet de définir la limite (en unité arbitraire) la longueur des sommets générés avec l'option ``Miter``
* **Connection safe distance:** Cette longueur représente le segment de la couche courante qui n'aura pas de matière déposée
* **Automatically reverse origin path:** Cette option permet de choisir si la trajectoire sera orientée dans le même sens que la trajectoire décalée
* **Number of layers:** The number of layers
* **Height between layers:** The height between each layer
* **Deposited material width:** The width of the material deposit
* **Arc points:** The precision of an arc imported from an SVG (in number of points generated)
* **Discontinuous trajectory:** Allows you to choose whether you want a discontinuous trajectory (with stops) or not
* **Number of passes:** Allows you to choose the width (in number of shifts) of each layer
* **Towards interior:** Allows you to define whether you want to shift the original trajectory inwards or not
* `EndType <http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/EndType.htm>`_: Sets the end type of the new offset path
* `JoinType <http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/JoinType.htm>`_ Sets the join type between each segment of the new offset path
* `ArcTolerance <http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Classes/ClipperOffset/Properties/ArcTolerance.htm>`_: Allows to define the precision of the discretization of the arcs
* `MiterLimit <http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Classes/ClipperOffset/Properties/MiterLimit.htm>`_ Sets the limit (in arbitrary units) of the length vertices generated with the ``Miter`` option
* **Connection safe distance:** This length represents the segment of the current layer that will not have deposited material
* **Automatically reverse origin path:** This option allows you to choose whether the trajectory will be oriented in the same direction as the offset trajectory
.. ATTENTION::
   Sur certaines trajectoires l'orientation automatique ne fonctionne pas: on peut alors chosir l'orientation de la trajectoire manuellement en sélectionnant l'option ``Manually reverse origin path``
   On some trajectories the automatic orientation does not work: you can then choose the orientation of the trajectory manually by selecting the option ``Manually reverse origin path``
* **Manually reverse origin path:** Permet de retourner manuellement la trajectoire d'origine
* **Change the connection:** Si l'on veut changer l'angle ou la distance de connexion
* **Manually reverse origin path:** Allows you to manually reverse the origin path
* **Change the connection:** If you want to change the connection angle or distance

Sur les trajectoires fermées, il est possible de changer l'angle de connexion. Cet angle représente le segment qui relie les différentes passes
entre elles dans une même couche. Il n'est valable uniquement pour les trajectoires fermées.

Sur les trajectoires ouvertes l'option ``Avoid trajectories crossing`` est utilisée afin d'éviter le croisement entre la trajectoire originelle et la trajectoire décalée.

On closed paths, it is possible to change the connection angle. This angle represents the segment that connects the different passes
together in the same layer. It is only valid for closed trajectories.

On open trajectories the ``Avoid trajectories crossing`` option is used to avoid crossing between the original trajectory and the offset trajectory.
.. NOTE::
   Ne pas hésiter à tester différents paramètres pour obtenir la trajectoire souhaitée, les combinaisons de paramètres sont multiples et la documentation n'est pas exhaustive.

.. |left| image:: temp_static/path_planning/polygon_offsets/angle_connection_45.png
   :scale: 15 %

.. |center| image:: temp_static/path_planning/polygon_offsets/angle_connection_normal.png
   :scale: 15 %

.. |right| image:: temp_static/path_planning/polygon_offsets/angle_connection_135.png
   :scale: 15 %

45 ° |left| 90° |center| 135° |right|

* **Connection type:** Permet de choisir si la connexion sera réalisée suivant un angle ou une distance
* **Connection type:** Allows you to choose whether the connection will be made at an angle or at a distance
.. image:: temp_static/path_planning/polygon_offsets/90_deg.png
   :align: center
   :scale: 65 %


.. image:: temp_static/path_planning/polygon_offsets/0_mm.png
   :align: center
   :scale: 65 %


.. image:: temp_static/path_planning/polygon_offsets/135_deg.png
   :align: center
   :scale: 65 %


.. image:: temp_static/path_planning/polygon_offsets/5_mm.png
   :align: center
   :scale: 65 %

* **Offset factor:** Permet de rajouter un décalage supplémentaire sur la zone de connexion entre chaque passe de décalage
* **Offset factor:** Allows you to add an additional offset to the connection zone between each offset pass
.. image:: temp_static/path_planning/polygon_offsets/options.png
   :align: center
   :scale: 70 %

Trajectoire discontinue Vs. continue
------------------------------------
- Trajectoire discontinue : la couche suivante repart du premier point de la couche précédente (le point 6, point de départ de la seconde couche est au dessus du point 0)
- Discontinuous trajectory: the next layer starts from the first point of the previous layer (point 6, starting point of the second layer is above point 0)
.. |discontinous| image:: temp_static/path_planning/polygon_offsets/discontinous_open.png
   :scale: 20 %

- Trajectoire continue : la couche suivante repart du même point que le dernier point de la couche précédente (le point 7 repart du point 4)

.. |continous| image:: temp_static/path_planning/polygon_offsets/continous_open.png
   :scale: 20 %

Trajectoire discontinue |discontinous| Trajectoire continue |continous|

Utilisation de l'algorithme
---------------------------
1) Choisir le fichier contenant la trajectoire originelle
2) Définir les paramètres de dépose (``Number of layers``, ``Height between layers``, ``Deposited material width``)
3) Choisir le nombre de points pour discrétiser les arcs du fichier SVG en entrée (si applicable) (``Arc points``)
4) Définir si l'on veut une trajectoire discontinue ou continue (``Discontinous trajectory``)
5) Définir si l'on accepte ou non un possible croisement des trajectoires originelle et décalée (``Avoid trajectories crossing``)
6) Définir le nombre de tours (``Number of passes``), permet de définir la largeur de la trajectoire décalée en nombre de tours
7) Choisir si l'on veut remplir la trajectoire originelle et conserver sa taille (``Towards interior`` cochée) ou si l'on veut la garder creuse et l'élargir
8) Définir le ``End type``; pour un polygone fermé, l'option ``Closed polygon`` est celle qui convient à 90%; pour un polygone ouvert, il est nécessaire de tester les différentes options, même si il est préférable de choisir une ``Open``.
Use of the algorithm
---------------------------
1) Choose the file containing the original trajectory
2) Define the deposit parameters (``Number of layers``, ``Height between layers``, ``Deposited material width``)
3) Choose the number of points to discretize the arcs of the input SVG file (if applicable) (``Arc points``)
4) Define whether you want a discontinuous or continuous trajectory (``Discontinuous trajectory``)
5) Define whether or not we accept a possible crossing of the original and shifted trajectories (``Avoid trajectories crossing``)
6) Define the number of turns (``Number of passes``), allows to define the width of the shifted trajectory in number of turns
7) Choose if you want to fill the original trajectory and keep its size (``Towards interior`` checked) or if you want to keep it hollow and widen it
8) Define the ``End type``; for a closed polygon, the ``Closed polygon`` option is 90% correct; for an open polygon, it is necessary to test the different options, even if it is preferable to choose an ``Open``.
.. NOTE::
   Il est possible que le type de terminaison ``End type`` génère ce type d'erreur ci-dessous, dans ce cas, il est nécessaire de changer de type de terminaisons
   It is possible that the end type ``End type`` generates this type of error below, in this case it is necessary to change the type of ends
.. image:: temp_static/path_planning/polygon_offsets/classic_error.png
   :align: center
   :scale: 50 %

9) Définir le ``Join type``; ceci permet de définir le type de raccordement entre les segments de la trajectoire décalée
10) Définir la tolerance souhaitée pour les discrétisations d'arcs effectuées durant le processus de calcul de la trajectoire décalée. Il est préférable de choisir une valeur grande (750) afin de limiter le nombre de poses dans la trajectoire (``Arc tolerance``). Cette option n'est valable que dans le cas où l'utilisateur choisi un ``End type`` type ``Open round`` ou bien un ``Join type`` de type ``Round``.
11) Définir le ``Miter limit`` permet de limiter la longueur des pointes dans les trajectoires décalées qui auraient des polygones avec des angles pointus
9) Define the ``Join type``; this makes it possible to define the type of connection between the segments of the offset trajectory
10) Define the desired tolerance for the discretizations of arcs carried out during the calculation process of the shifted trajectory. It is preferable to choose a large value (750) in order to limit the number of poses in the trajectory (``Arc tolerance``). This option is only valid if the user chooses an ``End type`` of the ``Open round`` type or a ``Join type`` of the ``Round`` type.
11) Setting the ``Miter limit`` allows to limit the length of spikes in offset trajectories that would have polygons with sharp angles
``Miter limit`` basse

.. image:: temp_static/path_planning/polygon_offsets/miter_limit_low.png
   :align: center
   :scale: 40 %

``Miter limit`` haute

.. image:: temp_static/path_planning/polygon_offsets/miter_limit_high.png
   :align: center
   :scale: 40 %

12) Définir la longueur du segment qui sera épargné par le procédé (``Connection safe distance``). Ce segment est le point de départ de la jonction continue entre deux tours (``passes``). Par défaut cette jonction est effectuée par un angle droit, mais il est possible de changer cet angle (cf. 15 )
13) Choisir si l'on souhaite que la sens de la trajectoire originelle soit dans le même que la trajectoire décalée, automatiquement ou non (``Automatically reverse origin path``)

.. ATTENTION::
   Il est possible que l'alogorithme n'arrive à résoudre automatiquement l'orientation du sens des différentes trajectoires. Dans ce cas, et si la trajectoire résultante n'est pas satisfaisante, il est nécessaire de décocher cette option et de cocher l'opération manuelle (``Manually reverse origin path``)

14) Définir l'orientation manuelle de la trajectoire originelle (``Manually reverse origin path``) dans le cas où la trajectoire ne serait pas satisfaisante avec l'option automatique (``Automatically reverse origin path``)
15) Choisir si l'on veut changer l'angle de connexion entre les différents tours de la trajectoire décalée (``passes``). Pour cela il convient de cocher l'option ``Change the connexion (only for closed paths)`` et de choisir soit un nouvel angle, autre que 90° par défaut, ou bien de choisir une distance. Il est possible de retrouver les valeurs d'angle ou de distance correspondants dans le panneau ``Trajectory information`` (cf. le chapitre :ref:`Trajectory information` de ce manuel).

- Illustration de la ``safe distance``:

.. |1.5mm| image:: temp_static/path_planning/polygon_offsets/safe_distance_1_5.png
   :scale: 25 %

.. |3mm| image:: temp_static/path_planning/polygon_offsets/safe_distance_3.png
   :scale: 25 %

|1.5mm| (1,5 mm) |3mm| (3 mm)

.. NOTE::
   Il est probable que la génération de la trajectoire avec des angles différents de 90° donne l'erreur ci-dessous. Pour éviter cette erreur, il convient de changer soit l'angle d'orientation de connectio, soit la distance de connexion. Il est possible que cette erreur provienne également de la longueur du segment épargné (``Connection safe distance``) dans ce cas il est nécessaire de réduire cette longueur.

.. image:: temp_static/path_planning/polygon_offsets/classic_error.png
   :align: center
   :scale: 70 %

16) De manière optionnelle, il est possible de rajouter un décalage sur les coordonnées de la connexion. Ceci va permettre de décaler la zone de connexion entre chaque tour. Ceci permet de limiter l'effet de couture. Dans ce cas, l'utilisateur est invité à modifier la valeur du champ ``Offset factor``. Ce décalage est calculé en millimètre.

.. NOTE::
   Il est possible que l'option ``Offset factor`` provoque des erreurs dans la nouvelle trajectoire. Il convient ainsi de diminuer sa valeur pour l'éviter.

Follow poses
============
Follow poses n’est pas réellement un algorithme, c’est un programme qui se contente de suivre les poses qu’on lui fournit.
Il est possible d'utiliser des fichiers YAML (``.yaml``) et SVG (``*.svg``) en entrée.

* **Duplicate layers:** Permet de dupliquer les poses du fichier YAML suivant l’axe Z.
* **Number of layers:** Le nombre de couches à générer.
* **Height between layers:** La distance entre chaque couche.
* **Invert one of two layers:** Permet d’inverser le sens de lecture d’une couche sur 2, afin que l’entrée de la couche suivante se retrouve au niveau de la sortie de la couche précédente.
* **Arc points:** Permet de choisir le nombre de points générés pour chaque arc de cercle qui sera discretisé.
* **Rotate poses:** Permet de choisir quelle sera la première pose de la trajectoire. A utiliser avec des polgyones fermés. On peut l'utiliser sur des polylignes mais un nouveau segment sera alors créé.

Il est possible de définir plusieurs couches dans un fichier YAML avec l'algorithme ``Follow poses``. Dans ce cas il n'est pas possible de dupliquer les couches.

Exemple de trajectoire avec orientation des poses spécifiées dans le fichier YAML:

.. image:: temp_static/path_planning/square_quaternion.png
   :align: center
   :scale: 30 %

.. ATTENTION:: Il n'est pas possible d'utiliser des ellipses / cercles dans les dessins SVG, il faut utiliser uniquement des poly-segments et des arcs de cercle.

.. NOTE:: FreeCAD peut directement exporter des fichiers SVG, tracez une esquisse dans le plan XY, sélectionnez la dans l'arbre des objets et exportez en **Flattened SVG** (version 0.18 ou plus de FreeCAD).

Transformer un DXF en SVG file
------------------------------
On peut dessiner une esquisse avec un programme de CAO (exemple: SolidWorks) puis l'exporter en DXF. En utilisant `LibreCAD <https://librecad.org/>`_ on peut alors convertir ce fichier en un SVG.

Il est fréquent que les fichiers DXF ne soient composés que de segments non liés entre eux, dans ce cas on peut le joindre automatiquement dans LibreCAD:

 * Sélectionnez tous les segments: ``Ctrl`` + ``A``
 * Menu ``Tools`` > ``Polyline`` > ``Create polyline from existing segments``

.. image:: temp_static/path_planning/LibreCAD.png
   :align: center
   :scale: 50 %

Exporter le fichier en utilisant le menu ``File`` > ``Export`` > ``Export as MakerCAM SVG...``

Revolve
=======
Cet algorithme permet de réaliser des pièces de révolution avec une peau fine ou épaisse.

L'algorithme lit un fichier `SVG <https://fr.wikipedia.org/wiki/Scalable_Vector_Graphics>`_ (image vectorielle) qui décrit la forme du profil à réaliser.

.. image:: temp_static/path_planning/revolve/revolve.png
   :align: center
   :scale: 70 %

L'utilisateur peut choisir:

* La hauteur entre chaque couche
* La largeur du dépot de matière (n'a une influence que quand le nombre de passe est supérieur à 1)
* Le nombre de points généré pour chaque passe de la révolution
* L'angle de connexion entre les passes
* Si la génération des passes se fait vers l'intérieur ou l'extérieur
* Le nombre de passes qui seront générés sur chaque couche
* Si les couches sont générées suivant l'axe Z (tranchage vertical) ou le long du profil (``Slice along path``)
* **Arc points** permet de choisir le nombre de points générés pour chaque arc de cercle qui sera discretisé.

L'image ci-dessous montre la différence entre le tranchage suivant Z (à gauche) et le tranchage suivant le profil (à droite)

.. image:: temp_static/path_planning/revolve/slicing_z_along_path.png
   :align: center
   :scale: 70 %

Profile
=======
Cet algorithme permet de réaliser des pièces de révolution avec une peau fine ou épaisse.

L'algorithme lit un fichier `SVG <https://fr.wikipedia.org/wiki/Scalable_Vector_Graphics>`_ (image vectorielle) qui décrit la forme du profil à réaliser. Cet algorithme est similaire à ``Revolve`` mais il est conçu pour être utilisé avec un positionneur.

.. image:: temp_static/path_planning/profile.png
   :align: center
   :scale: 70 %

L'utilisateur peut choisir:

* La hauteur entre chaque couche
* La largeur du dépot de matière (n'a une influence que quand le nombre de passe est supérieur à 1)
* Si les couches sont générées suivant l'axe Z (tranchage vertical) ou le long du profil (``Slice along path``)
* Si la génération des passes se fait vers l'intérieur ou l'extérieur
* Le nombre de passes qui seront générés sur chaque couche
* Un facteur de correction pour l'angle de la tête, 100% étant l'angle maximum, 0% signifiant que l'orientation des poses sera constante sur toute la trajectoire.
* **Angle type** permet de choisir comment l'orientation de la tête sera calculée sur la trajectoire.
* **Arc points** permet de choisir le nombre de points générés pour chaque arc de cercle qui sera discretisé.

8 passes, angle à 100%:

.. image:: temp_static/path_planning/profile/8_passes_angle_percentage_100.png
   :align: center
   :scale: 70 %

8 passes, angle à 50%:

.. image:: temp_static/path_planning/profile/8_passes_angle_percentage_50.png
   :align: center
   :scale: 70 %

8 passes, angle à 100% et ``Angle type`` à ``Zero opposite``:

.. image:: temp_static/path_planning/profile/8_passes_angle_percentage_100_zero_opposite_angle.png
   :align: center
   :scale: 70 %

Liste des modes pour ``Angle type``, l'angle est toujours calculé pour orienter la tête vers l'intérieur lorsqu'il n'y a pas de matière sous le cordon:

* **Constant** L'angle est constant sur toute la couche.
* **Opposite** L'angle est opposé de l'autre côté de la couche. Une transition est effectuée entre chaque passe.
* **Zero opposite** L'angle est nul de l'autre côté de la couche. Une transition est effectuée entre chaque passe.

Obtenir un dessin SVG
---------------------

Depuis `FreeCAD daily <https://launchpad.net/~freecad-maintainers/+archive/ubuntu/freecad-daily>`_, dessiner une esquisse dans le plan XY, sélectionner l'esquisse et exporter en SVG en utilisant ``Fichier`` > ``Exporter`` > ``Flattened SVG``.

.. ATTENTION:: Le dessins exportés depuis SolidWorks ne fonctionnent pas.

.. NOTE:: Il est possible qu'une fois exporté en SVG le premier point n'ai pas pour coordonnées 0, 0 mais un petite valeur comme 0.1, 0.1, ce n'est pas génant car l'algorithme décalle automatiquement tous les points du profil.

Il faut respecter certaines règles pour que le dessin SVG puisse être interprêté par l'algorithme:

* Le dessin doit être dans le plan XY (l'axe Y (du dessin) sera converti en axe Z pour la trajectoire, l'axe X restera X).
* Il ne doit y avoir qu'un seul poly-segment dans le dessin.
* Il faut toujours ajouter un segment qui part de l'origine (0, 0) vers le premier point du profil.
* Le premier point du profil doit toujours avoir une coordonnée X égale à 0 (il doit être sur l'axe X).
* Le profil doit être dessiné vers Y+ (pas vers Y-).
* Les points du profil doivent tous avoir des coordonnées Y croissantes (pas de retour vers le bas).
* Aucun point du profil ne peut avoir une coordonnée X inférieur à zero.

Exemple de dessin correct:

.. image:: temp_static/path_planning/revolve/profile.png
   :align: center
   :scale: 70 %

Profil non correct car intersecte l'axe Y (coordonnée X < 0):

.. image:: temp_static/path_planning/revolve/crosses_y.png
   :align: center
   :scale: 70 %

Profil non correct car les coordonées Y ne sont pas toujours strictement croissantes:

.. image:: temp_static/path_planning/revolve/wrong_direction.png
   :align: center
   :scale: 70 %

Debug visuel
============
Pour visualiser la génération de trajectoire sourcer le workspace catkin contenant l'application et lancer avec:

.. code-block:: bash

  roslaunch ram_qt_guis gui.launch debug_path_planning:=true

Ceci permet de visualiser la génération d'une trajectoire avec DonghongDing.
Une fenêtre ``Visualisation Toolkit - OpenGL`` (``VTK``) s'ouvre et reste vide jusqu'à ce qu'on génère une trajectoire.
Après avoir lancé la génération d'une trajectoire il faut appuyer sur la touche ``Entré`` du clavier dans le terminal pour passer à l'étape suivante.

.. image:: temp_static/path_planning/debug/1.png
   :align: center
   :scale: 70 %

.. image:: temp_static/path_planning/debug/2.png
   :align: center
   :scale: 70 %

.. NOTE:: Ne pas hésiter à tourner la vue dans la fenêtre VTK, certaines arrêtes sont parfois masquées suivant la vue.

A la fermeture du logiciel il faut fermer la fenêtre ``VTK`` manuellement.
